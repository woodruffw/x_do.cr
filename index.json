{"repository_name":"x_do","body":"x_do\n====\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI](https://github.com/woodruffw/x_do.cr/actions/workflows/ci.yml/badge.svg)](https://github.com/woodruffw/x_do.cr/actions/workflows/ci.yml)\n\n`XDo` is a Crystal interface for `libxdo`,\nthe C library that backs [`xdotool`](https://github.com/jordansissel/xdotool).\n\nIt exposes most of the functionality of `xdotool`, allowing\nusers to write Crystal programs that manage windows in an X11 instance.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  x_do:\n    github: woodruffw/x_do.cr\n```\n\n`libxdo` is required. On Debian-based systems, it can be installed via:\n\n```bash\n$ sudo apt install libxdo-dev\n```\n\n## Usage\n\n```crystal\nrequire \"x_do\"\n\nXDo.act do\n  active_window do |win|\n    win.type \"hello from Crystal!\"\n  end\nend\n```\n\nCheck out the [examples](./examples) folder for some practical examples.\n\n## Testing\n\nThe unit tests make the following assumptions:\n\n* You're running an instance of X11\n* You're running a window manager that's (mostly) ICCCM and EWMH compliant\n* You have `xlogo` installed\n\nTo run the unit tests on the default X11 display (`DISPLAY`, falling back on `:0`):\n\n```bash\n$ crystal spec\n```\n\nAlternatively, the tests can be run on another X11 display, like a Xephyr or Xvfb instance:\n\n```bash\n# replace \"99\" with your display number\n$ DISPLAY=:99 crystal spec\n```\n\nThe `util/xvfb-spec` script can be used to run the tests inside a temporary Xvfb instance running\nOpenbox:\n\n```bash\n$ ./util/xvfb-spec\n```\n\n## TODO\n\n* Complete bindings (`grep \"implement me!\"`)\n* Add error conditions (check return value of libxdo calls)\n\n## Contributing\n\n1. Fork it ( https://github.com/woodruffw/x_do/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [woodruffw](https://github.com/woodruffw) William Woodruff - creator, maintainer\n","program":{"html_id":"x_do/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"x_do","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"x_do/XDo","path":"XDo.html","kind":"class","full_name":"XDo","name":"XDo","abstract":false,"superclass":{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do.cr","line_number":18,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L18"},{"filename":"src/x_do/enums.cr","line_number":1,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L1"},{"filename":"src/x_do/libxdo.cr","line_number":1,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/libxdo.cr#L1"},{"filename":"src/x_do/version.cr","line_number":1,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/version.cr#L1"}],"repository_name":"x_do","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_DELAY","name":"DEFAULT_DELAY","value":"12000","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.8.3\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`XDo` is a Crystal interface for `libxdo`,\nthe C library that backs [`xdotool`](https://github.com/jordansissel/xdotool).\n\nIt exposes most of the functionality of `xdotool`, allowing\nusers to write Crystal programs that manage windows in an X11 instance.\n\nThe easiest way to use `XDo` is via `XDo.act`:\n\n```\nXDo.act do\n  active_window do |win|\n    win.type \"hello from Crystal!\"\n  end\nend\n```","summary":"<p><code><a href=\"XDo.html\">XDo</a></code> is a Crystal interface for <code>libxdo</code>, the C library that backs <a href=\"https://github.com/jordansissel/xdotool\" target=\"_blank\"><code>xdotool</code></a>.</p>","class_methods":[{"id":"act(&)-class-method","html_id":"act(&)-class-method","name":"act","doc":"Yields a block with an `XDo` instance, providing a DSL for interaction.\n\n```\nXDo.act do\n  select_window do |win|\n    win.unmap!\n    sleep 1\n    win.map!\n    win.type \"hello\"\n  end\n\n  desktop = 3\nend\n```","summary":"<p>Yields a block with an <code><a href=\"XDo.html\">XDo</a></code> instance, providing a DSL for interaction.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L61","def":{"name":"act","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"xdo = new\nwith xdo yield\n"}},{"id":"lib_version-class-method","html_id":"lib_version-class-method","name":"lib_version","doc":"Returns the version of `libxdo` being used as a `String`.","summary":"<p>Returns the version of <code>libxdo</code> being used as a <code>String</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L25","def":{"name":"lib_version","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.new(LibXDo.version)"}},{"id":"symbol_map-class-method","html_id":"symbol_map-class-method","name":"symbol_map","doc":"Returns a `Hash(String, String)` indicating the current symbol map.\n\n```\nXDo.symbol_map # => {\"alt\" => \"Alt_L\", \"ctrl\" => \"Control_L\"}\n```","summary":"<p>Returns a <code>Hash(String, String)</code> indicating the current symbol map.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L34","def":{"name":"symbol_map","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"map_p = LibXDo.get_symbol_map\nmap = Array(String).new\nn = 0\nwhile map_p[n]\n  map << (String.new(map_p[n]))\n  n = n + 1\nend\n(map.in_groups_of(2, \"\")).to_h\n"}}],"constructors":[{"id":"new(display=ENV[&quot;DISPLAY&quot;]?)-class-method","html_id":"new(display=ENV[&quot;DISPLAY&quot;]?)-class-method","name":"new","doc":"Creates a new `XDo` instance with the given X11 *display*.\n\n```\n# create an instance on the default display or `DISPLAY` env variable\nxdo = XDo.new\n\n# ...or with a different X display\nxdo2 = XDo.new(\":2\")\n\n# ... do some work ...\n```","summary":"<p>Creates a new <code><a href=\"XDo.html\">XDo</a></code> instance with the given X11 <em>display</em>.</p>","abstract":false,"args":[{"name":"display","doc":null,"default_value":"ENV[\"DISPLAY\"]?","external_name":"display","restriction":""}],"args_string":"(display = <span class=\"t\">ENV</span>[<span class=\"s\">&quot;DISPLAY&quot;</span>]?)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L77","def":{"name":"new","args":[{"name":"display","doc":null,"default_value":"ENV[\"DISPLAY\"]?","external_name":"display","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(display)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"active_modifiers-instance-method","html_id":"active_modifiers-instance-method","name":"active_modifiers","doc":"Returns a list of `XDo::LibXDo::Charcodemap`s indicating all active modifier keys.","summary":"<p>Returns a list of <code>XDo::LibXDo::Charcodemap</code>s indicating all active modifier keys.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L141","def":{"name":"active_modifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_active_modifiers(xdo_p, out keys, out nkeys)\nArray.new(nkeys) do |i|\n  keys[i]\nend\n"}},{"id":"active_window(&)-instance-method","html_id":"active_window(&)-instance-method","name":"active_window","doc":"Returns the `Window` that is currently active.","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> that is currently active.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L198","def":{"name":"active_window","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield active_window"}},{"id":"active_window-instance-method","html_id":"active_window-instance-method","name":"active_window","doc":"Returns the `Window` that is currently active.","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> that is currently active.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L192","def":{"name":"active_window","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_active_window(xdo_p, out window)\nWindow.new(xdo_p, window)\n"}},{"id":"clear_active_modifiers-instance-method","html_id":"clear_active_modifiers-instance-method","name":"clear_active_modifiers","doc":"TODO: implement","summary":"<p><span class=\"flag orange\">TODO</span>  implement</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L153","def":{"name":"clear_active_modifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(\"implement me!\")"}},{"id":"click(button:Button)-instance-method","html_id":"click(button:Button)-instance-method","name":"click","doc":"Click the given mouse *button* on the active window (mouse-down + mouse-up)","summary":"<p>Click the given mouse <em>button</em> on the active window (mouse-down + mouse-up)</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"args_string":"(button : Button)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L319","def":{"name":"click","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.click_window(xdo_p, 0, button)"}},{"id":"click(button:Button,repeat,delay=DEFAULT_DELAY)-instance-method","html_id":"click(button:Button,repeat,delay=DEFAULT_DELAY)-instance-method","name":"click","doc":"Click the given mouse *button* *repeat* times, with *delay* between each click.","summary":"<p>Click the given mouse <em>button</em> <em>repeat</em> times, with <em>delay</em> between each click.</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"},{"name":"repeat","doc":null,"default_value":"","external_name":"repeat","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(button : Button, repeat, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L324","def":{"name":"click","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"},{"name":"repeat","doc":null,"default_value":"","external_name":"repeat","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.click_window_multiple(xdo_p, 0, button, repeat, delay)"}},{"id":"desktop-instance-method","html_id":"desktop-instance-method","name":"desktop","doc":"Returns the current desktop's number.","summary":"<p>Returns the current desktop's number.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L259","def":{"name":"desktop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_current_desktop(xdo_p, out desktop)\ndesktop\n"}},{"id":"desktop=(desktop)-instance-method","html_id":"desktop=(desktop)-instance-method","name":"desktop=","doc":"Sets the current desktop.","summary":"<p>Sets the current desktop.</p>","abstract":false,"args":[{"name":"desktop","doc":null,"default_value":"","external_name":"desktop","restriction":""}],"args_string":"(desktop)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L254","def":{"name":"desktop=","args":[{"name":"desktop","doc":null,"default_value":"","external_name":"desktop","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_current_desktop(xdo_p, desktop)"}},{"id":"desktops-instance-method","html_id":"desktops-instance-method","name":"desktops","doc":"Returns the number of desktops.","summary":"<p>Returns the number of desktops.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L248","def":{"name":"desktops","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_number_of_desktops(xdo_p, out ndesktops)\nndesktops\n"}},{"id":"desktops=(ndesktops)-instance-method","html_id":"desktops=(ndesktops)-instance-method","name":"desktops=","doc":"Sets the number of desktops.","summary":"<p>Sets the number of desktops.</p>","abstract":false,"args":[{"name":"ndesktops","doc":null,"default_value":"","external_name":"ndesktops","restriction":""}],"args_string":"(ndesktops)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L243","def":{"name":"desktops=","args":[{"name":"ndesktops","doc":null,"default_value":"","external_name":"ndesktops","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_number_of_desktops(xdo_p, ndesktops)"}},{"id":"disable_feature(feature:XDoFeatures)-instance-method","html_id":"disable_feature(feature:XDoFeatures)-instance-method","name":"disable_feature","doc":"Disable an `xdo` feature.","summary":"<p>Disable an <code>xdo</code> feature.</p>","abstract":false,"args":[{"name":"feature","doc":null,"default_value":"","external_name":"feature","restriction":"XDoFeatures"}],"args_string":"(feature : XDoFeatures)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L294","def":{"name":"disable_feature","args":[{"name":"feature","doc":null,"default_value":"","external_name":"feature","restriction":"XDoFeatures"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.disable_feature(xdo_p, feature)"}},{"id":"display:String?-instance-method","html_id":"display:String?-instance-method","name":"display","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L20","def":{"name":"display","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@display"}},{"id":"enable_feature(feature:XDoFeatures)-instance-method","html_id":"enable_feature(feature:XDoFeatures)-instance-method","name":"enable_feature","doc":"Enable an `xdo` feature.","summary":"<p>Enable an <code>xdo</code> feature.</p>","abstract":false,"args":[{"name":"feature","doc":null,"default_value":"","external_name":"feature","restriction":"XDoFeatures"}],"args_string":"(feature : XDoFeatures)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L299","def":{"name":"enable_feature","args":[{"name":"feature","doc":null,"default_value":"","external_name":"feature","restriction":"XDoFeatures"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.enable_feature(xdo_p, feature)"}},{"id":"finalize-instance-method","html_id":"finalize-instance-method","name":"finalize","doc":"Destroys the instance's internal state.","summary":"<p>Destroys the instance's internal state.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L87","def":{"name":"finalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.free(xdo_p)"}},{"id":"focused_window(*,sane=true)-instance-method","html_id":"focused_window(*,sane=true)-instance-method","name":"focused_window","doc":"Returns the `Window` that currently has focus.\n\nWhen *sane* is set to `true`, returns the first ancestor-or-self window\nwith the `WM_CLASS` property. When set to `false`, returns the actual focused\nwindow (which may not be the application's top-level window).","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> that currently has focus.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sane","doc":null,"default_value":"true","external_name":"sane","restriction":""}],"args_string":"(*, sane = <span class=\"n\">true</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L163","def":{"name":"focused_window","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sane","doc":null,"default_value":"true","external_name":"sane","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"window = uninitialized LibXDo::Window\nif sane\n  LibXDo.get_focused_window_sane(xdo_p, pointerof(window))\nelse\n  LibXDo.get_focused_window(xdo_p, pointerof(window))\nend\nWindow.new(xdo_p, window)\n"}},{"id":"focused_window(*,sane=true,&)-instance-method","html_id":"focused_window(*,sane=true,&)-instance-method","name":"focused_window","doc":"Returns the `Window` that currently has focus.\n\nWhen *sane* is set to `true`, returns the first ancestor-or-self window\nwith the `WM_CLASS` property. When set to `false`, returns the actual focused\nwindow (which may not be the application's top-level window).","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> that currently has focus.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sane","doc":null,"default_value":"true","external_name":"sane","restriction":""}],"args_string":"(*, sane = <span class=\"n\">true</span>, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L176","def":{"name":"focused_window","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"sane","doc":null,"default_value":"true","external_name":"sane","restriction":""}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield focused_window(sane: sane)"}},{"id":"has_feature?(feature:XDoFeatures)-instance-method","html_id":"has_feature?(feature:XDoFeatures)-instance-method","name":"has_feature?","doc":"Test whether a feature is enabled.","summary":"<p>Test whether a feature is enabled.</p>","abstract":false,"args":[{"name":"feature","doc":null,"default_value":"","external_name":"feature","restriction":"XDoFeatures"}],"args_string":"(feature : XDoFeatures)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L304","def":{"name":"has_feature?","args":[{"name":"feature","doc":null,"default_value":"","external_name":"feature","restriction":"XDoFeatures"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(LibXDo.has_feature(xdo_p, feature)) == 1"}},{"id":"input_state:KeyMask-instance-method","html_id":"input_state:KeyMask-instance-method","name":"input_state","doc":"Returns the input state, which is the `OR` of any active modifiers\nin the `KeyMask`.","summary":"<p>Returns the input state, which is the <code>OR</code> of any active modifiers in the <code><a href=\"XDo/KeyMask.html\">KeyMask</a></code>.</p>","abstract":false,"args":[],"args_string":" : KeyMask","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L266","def":{"name":"input_state","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"KeyMask","visibility":"Public","body":"LibXDo.get_input_state(xdo_p)"}},{"id":"keys(keys:String,delay=DEFAULT_DELAY)-instance-method","html_id":"keys(keys:String,delay=DEFAULT_DELAY)-instance-method","name":"keys","doc":"Send some *keys* (down + up) to the active window, with *delay* between them.\n\n```\nkeys \"Ctrl+s\"\n```","summary":"<p>Send some <em>keys</em> (down + up) to the active window, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L342","def":{"name":"keys","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window(xdo_p, 0, keys, delay)"}},{"id":"keys_down(keys:String,delay=DEFAULT_DELAY)-instance-method","html_id":"keys_down(keys:String,delay=DEFAULT_DELAY)-instance-method","name":"keys_down","doc":"Send some key press (down) events for the given *keys*, with *delay* between them.\nSee `#keys_up`.\n\n```\nkeys_down \"Ctrl+o\"\n```","summary":"<p>Send some key press (down) events for the given <em>keys</em>, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L352","def":{"name":"keys_down","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window_down(xdo_p, 0, keys, delay)"}},{"id":"keys_raw(keys:Array(LibXDo::Charcodemap),*,pressed:Bool,modifier=0,delay=DEFAULT_DELAY)-instance-method","html_id":"keys_raw(keys:Array(LibXDo::Charcodemap),*,pressed:Bool,modifier=0,delay=DEFAULT_DELAY)-instance-method","name":"keys_raw","doc":"Send some key events by specifying keysyms and modifiers directly,\nwith *delay* between them.\nYou most likely want to use `#keys` or `#type` instead, however this function\nskips the string parsing and should consequently run slightly faster.\n\n```\nkey1 = XDo::LibXDo::Charcodemap.new\nkey1.code = 38\nkey1.modmask = 1\nkey2 = XDo::LibXDo::Charcodemap.new\nkey2.code = 56\nkeys = [key1, key2]\n# Sends `AB`\nkeys_raw keys, pressed: true\nkeys_raw keys, pressed: false\n```","summary":"<p>Send some key events by specifying keysyms and modifiers directly, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(LibXDo::Charcodemap)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pressed","doc":null,"default_value":"","external_name":"pressed","restriction":"Bool"},{"name":"modifier","doc":null,"default_value":"0","external_name":"modifier","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : Array(LibXDo::Charcodemap), *, pressed : Bool, modifier = <span class=\"n\">0</span>, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L382","def":{"name":"keys_raw","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(LibXDo::Charcodemap)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pressed","doc":null,"default_value":"","external_name":"pressed","restriction":"Bool"},{"name":"modifier","doc":null,"default_value":"0","external_name":"modifier","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window_list_do(xdo_p, 0, keys, keys.size, pressed, pointerof(modifier), delay)"}},{"id":"keys_up(keys:String,delay=DEFAULT_DELAY)-instance-method","html_id":"keys_up(keys:String,delay=DEFAULT_DELAY)-instance-method","name":"keys_up","doc":"Send some key release (up) events for the given *keys*, with *delay* between them.\nSee `#keys_down`.\n\n```\nkeys_up \"Ctrl+o\"\n```","summary":"<p>Send some key release (up) events for the given <em>keys</em>, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L362","def":{"name":"keys_up","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window_up(xdo_p, 0, keys, delay)"}},{"id":"mouse_down(button:Button)-instance-method","html_id":"mouse_down(button:Button)-instance-method","name":"mouse_down","doc":"Send a mouse-down event for the given mouse *button* to the active window.","summary":"<p>Send a mouse-down event for the given mouse <em>button</em> to the active window.</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"args_string":"(button : Button)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L309","def":{"name":"mouse_down","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.mouse_down(xdo_p, 0, button)"}},{"id":"mouse_location-instance-method","html_id":"mouse_location-instance-method","name":"mouse_location","doc":"Returns the mouse's current position as a tuple of `x` and `y` coordinates,\nthe `screen` it's on, and the `Window` it's over.\n\n```\nx, y, screen, win = xdo.mouse_location\n```","summary":"<p>Returns the mouse's current position as a tuple of <code>x</code> and <code>y</code> coordinates, the <code>screen</code> it's on, and the <code><a href=\"XDo/Window.html\">Window</a></code> it's over.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L107","def":{"name":"mouse_location","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_mouse_location2(xdo_p, out x, out y, out screen, out window)\n{x, y, screen, Window.new(xdo_p, window)}\n"}},{"id":"mouse_up(button:Button)-instance-method","html_id":"mouse_up(button:Button)-instance-method","name":"mouse_up","doc":"Send a mouse-up event for the given mouse *button* to the active window.","summary":"<p>Send a mouse-up event for the given mouse <em>button</em> to the active window.</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"args_string":"(button : Button)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L314","def":{"name":"mouse_up","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.mouse_up(xdo_p, 0, button)"}},{"id":"mouse_window(&)-instance-method","html_id":"mouse_window(&)-instance-method","name":"mouse_window","doc":"Returns the `Window` that the mouse is currently over.","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> that the mouse is currently over.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L187","def":{"name":"mouse_window","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield mouse_window"}},{"id":"mouse_window-instance-method","html_id":"mouse_window-instance-method","name":"mouse_window","doc":"Returns the `Window` that the mouse is currently over.","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> that the mouse is currently over.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L181","def":{"name":"mouse_window","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_window_at_mouse(xdo_p, out window)\nWindow.new(xdo_p, window)\n"}},{"id":"move_mouse(x,y,screen)-instance-method","html_id":"move_mouse(x,y,screen)-instance-method","name":"move_mouse","doc":"Moves the mouse to coordinates *x*, *y* on the given *screen*.","summary":"<p>Moves the mouse to coordinates <em>x</em>, <em>y</em> on the given <em>screen</em>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""},{"name":"screen","doc":null,"default_value":"","external_name":"screen","restriction":""}],"args_string":"(x, y, screen)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L92","def":{"name":"move_mouse","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""},{"name":"screen","doc":null,"default_value":"","external_name":"screen","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.move_mouse(xdo_p, x, y, screen)"}},{"id":"move_mouse(x,y)-instance-method","html_id":"move_mouse(x,y)-instance-method","name":"move_mouse","doc":"Moves the mouse to coordinates *x*, *y* relative to its current position.","summary":"<p>Moves the mouse to coordinates <em>x</em>, <em>y</em> relative to its current position.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L97","def":{"name":"move_mouse","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.move_mouse_relative(xdo_p, x, y)"}},{"id":"on_mouse_move(&)-instance-method","html_id":"on_mouse_move(&)-instance-method","name":"on_mouse_move","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L134","def":{"name":"on_mouse_move","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"x, y, _, _ = mouse_location\nwait_for_mouse_move_from(x, y)\nwith self yield\n"}},{"id":"on_mouse_move_from(x,y,&)-instance-method","html_id":"on_mouse_move_from(x,y,&)-instance-method","name":"on_mouse_move_from","doc":"Wait for the mouse to move from the coordinates *x*, *y*.","summary":"<p>Wait for the mouse to move from the coordinates <em>x</em>, <em>y</em>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L118","def":{"name":"on_mouse_move_from","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_mouse_move_from(x, y)\nwith self yield\n"}},{"id":"on_mouse_move_to(x,y,&)-instance-method","html_id":"on_mouse_move_to(x,y,&)-instance-method","name":"on_mouse_move_to","doc":"Wait for the mouse to move to the coordinates *x*, *y*.","summary":"<p>Wait for the mouse to move to the coordinates <em>x</em>, <em>y</em>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L129","def":{"name":"on_mouse_move_to","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_mouse_move_to(x, y)\nwith self yield\n"}},{"id":"search(query)-instance-method","html_id":"search(query)-instance-method","name":"search","doc":"Takes a `Search` and runs it, returning a list of `Window`s matching the search.\n\n```\nXDo.act do\n  query = XDo::Search.build { window_name \"Firefox\" }\n  winds = search(query)\n  puts winds\nend\n```","summary":"<p>Takes a <code><a href=\"XDo/Search.html\">Search</a></code> and runs it, returning a list of <code><a href=\"XDo/Window.html\">Window</a></code>s matching the search.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"args_string":"(query)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L222","def":{"name":"search","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"search = query.to_struct\nLibXDo.search_windows(xdo_p, pointerof(search), out windowlist, out nwindows)\nArray.new(nwindows) do |i|\n  Window.new(xdo_p, windowlist[i])\nend\n"}},{"id":"search(&)-instance-method","html_id":"search(&)-instance-method","name":"search","doc":"Like `#search(query)`, but yields a block to build the query directly.\n\n```\nXDo.act do\n  winds = search { window_name \"Firefox\" }\n  puts winds\nend\n```","summary":"<p>Like <code><a href=\"XDo.html#search(query)-instance-method\">#search(query)</a></code>, but yields a block to build the query directly.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L236","def":{"name":"search","args":[],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"query = Search.new\nwith query yield\nsearch(query)\n"}},{"id":"select_window(&)-instance-method","html_id":"select_window(&)-instance-method","name":"select_window","doc":"Returns the `Window` selected interactively.","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> selected interactively.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L209","def":{"name":"select_window","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield select_window"}},{"id":"select_window-instance-method","html_id":"select_window-instance-method","name":"select_window","doc":"Returns the `Window` selected interactively.","summary":"<p>Returns the <code><a href=\"XDo/Window.html\">Window</a></code> selected interactively.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L203","def":{"name":"select_window","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.select_window_with_click(xdo_p, out window)\nWindow.new(xdo_p, window)\n"}},{"id":"set_active_modifiers-instance-method","html_id":"set_active_modifiers-instance-method","name":"set_active_modifiers","doc":"TODO: implement","summary":"<p><span class=\"flag orange\">TODO</span>  implement</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L147","def":{"name":"set_active_modifiers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"raise(\"implement me!\")"}},{"id":"type(text:String,delay=DEFAULT_DELAY)-instance-method","html_id":"type(text:String,delay=DEFAULT_DELAY)-instance-method","name":"type","doc":"Send some *text* to the active window, with *delay* between the keystrokes.\n\n```\ntype \"hello from Crystal!\"\n```","summary":"<p>Send some <em>text</em> to the active window, with <em>delay</em> between the keystrokes.</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(text : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L333","def":{"name":"type","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.enter_text_window(xdo_p, 0, text, delay)"}},{"id":"viewport-instance-method","html_id":"viewport-instance-method","name":"viewport","doc":"Gets the desktop viewport as an `x`, `y` tuple.","summary":"<p>Gets the desktop viewport as an <code>x</code>, <code>y</code> tuple.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L282","def":{"name":"viewport","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_desktop_viewport(xdo_p, out x, out y)\n{x, y}\n"}},{"id":"viewport=(tup)-instance-method","html_id":"viewport=(tup)-instance-method","name":"viewport=","doc":"Sets the desktop viewport (only relevant if `_NET_DESKTOP_VIEWPORT` is supported).\n\n```\nXDo.act do\n  viewport = {x, y}\nend\n```","summary":"<p>Sets the desktop viewport (only relevant if <code>_NET_DESKTOP_VIEWPORT</code> is supported).</p>","abstract":false,"args":[{"name":"tup","doc":null,"default_value":"","external_name":"tup","restriction":""}],"args_string":"(tup)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L277","def":{"name":"viewport=","args":[{"name":"tup","doc":null,"default_value":"","external_name":"tup","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_desktop_viewport(xdo_p, *tup)"}},{"id":"viewport_dimensions(screen)-instance-method","html_id":"viewport_dimensions(screen)-instance-method","name":"viewport_dimensions","doc":"Gets the dimensions of the given screen's viewport as a `width`, `height` tuple.","summary":"<p>Gets the dimensions of the given screen's viewport as a <code>width</code>, <code>height</code> tuple.</p>","abstract":false,"args":[{"name":"screen","doc":null,"default_value":"","external_name":"screen","restriction":""}],"args_string":"(screen)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L288","def":{"name":"viewport_dimensions","args":[{"name":"screen","doc":null,"default_value":"","external_name":"screen","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_viewport_dimensions(xdo_p, out width, out height, screen)\n{width, height}\n"}},{"id":"wait_for_mouse_move_from(x,y)-instance-method","html_id":"wait_for_mouse_move_from(x,y)-instance-method","name":"wait_for_mouse_move_from","doc":"Wait for the mouse to move from the coordinates *x*, *y*.","summary":"<p>Wait for the mouse to move from the coordinates <em>x</em>, <em>y</em>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L113","def":{"name":"wait_for_mouse_move_from","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_mouse_move_from(xdo_p, x, y)"}},{"id":"wait_for_mouse_move_to(x,y)-instance-method","html_id":"wait_for_mouse_move_to(x,y)-instance-method","name":"wait_for_mouse_move_to","doc":"Wait for the mouse to move to the coordinates *x*, *y*.","summary":"<p>Wait for the mouse to move to the coordinates <em>x</em>, <em>y</em>.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do.cr#L124","def":{"name":"wait_for_mouse_move_to","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_mouse_move_to(xdo_p, x, y)"}}],"macros":[],"types":[{"html_id":"x_do/XDo/Button","path":"XDo/Button.html","kind":"enum","full_name":"XDo::Button","name":"Button","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":2,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L2"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Left","name":"Left","value":"1","doc":null,"summary":null},{"id":"Middle","name":"Middle","value":"2","doc":null,"summary":null},{"id":"Right","name":"Right","value":"3","doc":null,"summary":null},{"id":"ScrollUp","name":"ScrollUp","value":"4","doc":null,"summary":null},{"id":"ScrollDown","name":"ScrollDown","value":"5","doc":null,"summary":null},{"id":"ScrollLeft","name":"ScrollLeft","value":"6","doc":null,"summary":null},{"id":"ScrollRight","name":"ScrollRight","value":"7","doc":null,"summary":null},{"id":"Button8","name":"Button8","value":"8","doc":null,"summary":null},{"id":"Button9","name":"Button9","value":"9","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"button8?-instance-method","html_id":"button8?-instance-method","name":"button8?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L10","def":{"name":"button8?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Button8"}},{"id":"button9?-instance-method","html_id":"button9?-instance-method","name":"button9?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L11","def":{"name":"button9?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Button9"}},{"id":"left?-instance-method","html_id":"left?-instance-method","name":"left?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L3","def":{"name":"left?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Left"}},{"id":"middle?-instance-method","html_id":"middle?-instance-method","name":"middle?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L4","def":{"name":"middle?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Middle"}},{"id":"right?-instance-method","html_id":"right?-instance-method","name":"right?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L5","def":{"name":"right?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Right"}},{"id":"scroll_down?-instance-method","html_id":"scroll_down?-instance-method","name":"scroll_down?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L7","def":{"name":"scroll_down?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ScrollDown"}},{"id":"scroll_left?-instance-method","html_id":"scroll_left?-instance-method","name":"scroll_left?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L8","def":{"name":"scroll_left?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ScrollLeft"}},{"id":"scroll_right?-instance-method","html_id":"scroll_right?-instance-method","name":"scroll_right?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L9","def":{"name":"scroll_right?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ScrollRight"}},{"id":"scroll_up?-instance-method","html_id":"scroll_up?-instance-method","name":"scroll_up?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L6","def":{"name":"scroll_up?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ScrollUp"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/ClientDirection","path":"XDo/ClientDirection.html","kind":"enum","full_name":"XDo::ClientDirection","name":"ClientDirection","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":14,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L14"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Parents","name":"Parents","value":"0","doc":null,"summary":null},{"id":"Children","name":"Children","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"children?-instance-method","html_id":"children?-instance-method","name":"children?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L16","def":{"name":"children?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Children"}},{"id":"parents?-instance-method","html_id":"parents?-instance-method","name":"parents?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L15","def":{"name":"parents?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Parents"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/Error","path":"XDo/Error.html","kind":"class","full_name":"XDo::Error","name":"Error","abstract":false,"superclass":{"html_id":"x_do/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"x_do/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/exception.cr","line_number":1,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/exception.cr#L1"}],"repository_name":"x_do","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"x_do/XDo/KeyMask","path":"XDo/KeyMask.html","kind":"enum","full_name":"XDo::KeyMask","name":"KeyMask","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":20,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L20"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Shift","name":"Shift","value":"1","doc":null,"summary":null},{"id":"Lock","name":"Lock","value":"2","doc":null,"summary":null},{"id":"Control","name":"Control","value":"4","doc":null,"summary":null},{"id":"Mod1","name":"Mod1","value":"8","doc":null,"summary":null},{"id":"Mod2","name":"Mod2","value":"16","doc":null,"summary":null},{"id":"Mod3","name":"Mod3","value":"32","doc":null,"summary":null},{"id":"Mod4","name":"Mod4","value":"64","doc":null,"summary":null},{"id":"Mod5","name":"Mod5","value":"128","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"control?-instance-method","html_id":"control?-instance-method","name":"control?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L23","def":{"name":"control?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Control)"}},{"id":"lock?-instance-method","html_id":"lock?-instance-method","name":"lock?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L22","def":{"name":"lock?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Lock)"}},{"id":"mod1?-instance-method","html_id":"mod1?-instance-method","name":"mod1?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L24","def":{"name":"mod1?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Mod1)"}},{"id":"mod2?-instance-method","html_id":"mod2?-instance-method","name":"mod2?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L25","def":{"name":"mod2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Mod2)"}},{"id":"mod3?-instance-method","html_id":"mod3?-instance-method","name":"mod3?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L26","def":{"name":"mod3?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Mod3)"}},{"id":"mod4?-instance-method","html_id":"mod4?-instance-method","name":"mod4?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L27","def":{"name":"mod4?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Mod4)"}},{"id":"mod5?-instance-method","html_id":"mod5?-instance-method","name":"mod5?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L28","def":{"name":"mod5?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Mod5)"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L20","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value == 0"}},{"id":"shift?-instance-method","html_id":"shift?-instance-method","name":"shift?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L21","def":{"name":"shift?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Shift)"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/ResizeFlag","path":"XDo/ResizeFlag.html","kind":"enum","full_name":"XDo::ResizeFlag","name":"ResizeFlag","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":31,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L31"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Pixels","name":"Pixels","value":"0","doc":null,"summary":null},{"id":"UseHints","name":"UseHints","value":"1","doc":null,"summary":null},{"id":"UseHintsX","name":"UseHintsX","value":"2","doc":null,"summary":null},{"id":"UseHintsY","name":"UseHintsY","value":"4","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"pixels?-instance-method","html_id":"pixels?-instance-method","name":"pixels?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L32","def":{"name":"pixels?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Pixels"}},{"id":"use_hints?-instance-method","html_id":"use_hints?-instance-method","name":"use_hints?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L33","def":{"name":"use_hints?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == UseHints"}},{"id":"use_hints_x?-instance-method","html_id":"use_hints_x?-instance-method","name":"use_hints_x?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L34","def":{"name":"use_hints_x?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == UseHintsX"}},{"id":"use_hints_y?-instance-method","html_id":"use_hints_y?-instance-method","name":"use_hints_y?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L35","def":{"name":"use_hints_y?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == UseHintsY"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/Screen","path":"XDo/Screen.html","kind":"class","full_name":"XDo::Screen","name":"Screen","abstract":false,"superclass":{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/screen.cr","line_number":9,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L9"}],"repository_name":"x_do","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":"Represents an `XDo` view of an X11 screen.\n\nTODO: Expose `depths` and `root_visual`.\n\n```\nputs \"width: #{screen.width}, height: #{screen.height}\"\nscreen.root_window.move_mouse 0, 0\n```","summary":"<p>Represents an <code><a href=\"../XDo.html\">XDo</a></code> view of an X11 screen.</p>","class_methods":[],"constructors":[{"id":"new(xdo_p,screen_p)-class-method","html_id":"new(xdo_p,screen_p)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"xdo_p","doc":null,"default_value":"","external_name":"xdo_p","restriction":""},{"name":"screen_p","doc":null,"default_value":"","external_name":"screen_p","restriction":""}],"args_string":"(xdo_p, screen_p)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L29","def":{"name":"new","args":[{"name":"xdo_p","doc":null,"default_value":"","external_name":"xdo_p","restriction":""},{"name":"screen_p","doc":null,"default_value":"","external_name":"screen_p","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(xdo_p, screen_p)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"backing_store-instance-method","html_id":"backing_store-instance-method","name":"backing_store","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"backing_store","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.backing_store"}},{"id":"black_pixel-instance-method","html_id":"black_pixel-instance-method","name":"black_pixel","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"black_pixel","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.black_pixel"}},{"id":"height-instance-method","html_id":"height-instance-method","name":"height","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"height","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.height"}},{"id":"max_maps-instance-method","html_id":"max_maps-instance-method","name":"max_maps","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"max_maps","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.max_maps"}},{"id":"mheight-instance-method","html_id":"mheight-instance-method","name":"mheight","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"mheight","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.mheight"}},{"id":"min_maps-instance-method","html_id":"min_maps-instance-method","name":"min_maps","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"min_maps","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.min_maps"}},{"id":"mwidth-instance-method","html_id":"mwidth-instance-method","name":"mwidth","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"mwidth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.mwidth"}},{"id":"ndepths-instance-method","html_id":"ndepths-instance-method","name":"ndepths","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"ndepths","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.ndepths"}},{"id":"root_depth-instance-method","html_id":"root_depth-instance-method","name":"root_depth","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"root_depth","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.root_depth"}},{"id":"root_input_mask-instance-method","html_id":"root_input_mask-instance-method","name":"root_input_mask","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"root_input_mask","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.root_input_mask"}},{"id":"root_window-instance-method","html_id":"root_window-instance-method","name":"root_window","doc":"Returns a `Window` corresponding to the screen's root.","summary":"<p>Returns a <code><a href=\"../XDo/Window.html\">Window</a></code> corresponding to the screen's root.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L39","def":{"name":"root_window","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Window.new(xdo_p, screen_p.value.root)"}},{"id":"save_unders-instance-method","html_id":"save_unders-instance-method","name":"save_unders","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"save_unders","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.save_unders"}},{"id":"white_pixel-instance-method","html_id":"white_pixel-instance-method","name":"white_pixel","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"white_pixel","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.white_pixel"}},{"id":"width-instance-method","html_id":"width-instance-method","name":"width","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/screen.cr#L32","def":{"name":"width","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"screen_p.value.width"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/Search","path":"XDo/Search.html","kind":"class","full_name":"XDo::Search","name":"Search","abstract":false,"superclass":{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/search.cr","line_number":8,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L8"}],"repository_name":"x_do","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":"Represents an `XDo` search query.\n\nQueries can contain multiple conditions (such as matching both a window name *and* a\nprocess ID), as well as impose restrictions on the number of results returned,\nsearch depth, and extent of search (e.g., limiting the search to a single screen).\n\nSee `XDo#search(query)` for an example of using `Search` objects.","summary":"<p>Represents an <code><a href=\"../XDo.html\">XDo</a></code> search query.</p>","class_methods":[{"id":"build(&)-class-method","html_id":"build(&)-class-method","name":"build","doc":"Builds a `Search` instance via a DSL.\n\n```\n# find no more than 3 windows that are both visible AND have the name \"Firefox\"\nSearch.build do\n  require_all\n  only_visible\n  window_name \"Firefox\"\n  limit 3\nend\n```","summary":"<p>Builds a <code><a href=\"../XDo/Search.html\">Search</a></code> instance via a DSL.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L32","def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"search = new\nwith search yield\nsearch\n"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Create a new `Search`.\n\nNOTE: New `Search` instances contain no query criteria.","summary":"<p>Create a new <code><a href=\"../XDo/Search.html\">Search</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L41","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"desktop(desktop)-instance-method","html_id":"desktop(desktop)-instance-method","name":"desktop","doc":"Search for windows on *desktop*.","summary":"<p>Search for windows on <em>desktop</em>.</p>","abstract":false,"args":[{"name":"desktop","doc":null,"default_value":"","external_name":"desktop","restriction":""}],"args_string":"(desktop)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L82","def":{"name":"desktop","args":[{"name":"desktop","doc":null,"default_value":"","external_name":"desktop","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::Desktop\n@desktop = desktop\n"}},{"id":"limit(limit)-instance-method","html_id":"limit(limit)-instance-method","name":"limit","doc":"Limit the number of results returned. By default, no limit (`0`) is imposed.","summary":"<p>Limit the number of results returned.</p>","abstract":false,"args":[{"name":"limit","doc":null,"default_value":"","external_name":"limit","restriction":""}],"args_string":"(limit)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L104","def":{"name":"limit","args":[{"name":"limit","doc":null,"default_value":"","external_name":"limit","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@limit = limit"}},{"id":"mask:SearchMask-instance-method","html_id":"mask:SearchMask-instance-method","name":"mask","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : SearchMask","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L9","def":{"name":"mask","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"SearchMask","visibility":"Public","body":"@mask"}},{"id":"max_depth(depth)-instance-method","html_id":"max_depth(depth)-instance-method","name":"max_depth","doc":"Limit search to a depth of *depth*.\n\n`0` guarantees an empty search, `1` limits the search to toplevel windows only.\nBy default, no limit (`-1`) is imposed.","summary":"<p>Limit search to a depth of <em>depth</em>.</p>","abstract":false,"args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"args_string":"(depth)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L99","def":{"name":"max_depth","args":[{"name":"depth","doc":null,"default_value":"","external_name":"depth","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@max_depth = depth"}},{"id":"only_visible-instance-method","html_id":"only_visible-instance-method","name":"only_visible","doc":"Search only for windows that are currently visible.","summary":"<p>Search only for windows that are currently visible.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L70","def":{"name":"only_visible","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::OnlyVisible\n@only_visible = true\n"}},{"id":"pid(pid)-instance-method","html_id":"pid(pid)-instance-method","name":"pid","doc":"Search for windows whose (`_NET_WM_PID`) are *pid*.","summary":"<p>Search for windows whose (<code>_NET_WM_PID</code>) are <em>pid</em>.</p>","abstract":false,"args":[{"name":"pid","doc":null,"default_value":"","external_name":"pid","restriction":""}],"args_string":"(pid)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L64","def":{"name":"pid","args":[{"name":"pid","doc":null,"default_value":"","external_name":"pid","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::Pid\n@pid = pid\n"}},{"id":"require_all-instance-method","html_id":"require_all-instance-method","name":"require_all","doc":"Require all criteria to be met, not just one.\n\nThis is equivalent to requiring the `AND` of all conditions, rather than the\n`OR` (which is the default).","summary":"<p>Require all criteria to be met, not just one.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L91","def":{"name":"require_all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@any_or_all = SearchType::All"}},{"id":"screen(screen)-instance-method","html_id":"screen(screen)-instance-method","name":"screen","doc":"Search for windows on *screen*.","summary":"<p>Search for windows on <em>screen</em>.</p>","abstract":false,"args":[{"name":"screen","doc":null,"default_value":"","external_name":"screen","restriction":""}],"args_string":"(screen)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L76","def":{"name":"screen","args":[{"name":"screen","doc":null,"default_value":"","external_name":"screen","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::Screen\n@screen = screen\n"}},{"id":"to_struct-instance-method","html_id":"to_struct-instance-method","name":"to_struct","doc":"Converts the instance into a struct compatible with `libxdo`.\nNOTE: You should never have to interact with this method directly.","summary":"<p>Converts the instance into a struct compatible with <code>libxdo</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L110","def":{"name":"to_struct","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @mask.none?\n  raise(Error.new(\"can't structify an empty search\"))\nend\nLibXDo::Search.new(winclass: @window_class, winclassname: @window_class_name, winname: @window_name, pid: @pid, max_depth: @max_depth, only_visible: (@only_visible ? 1 : 0), screen: @screen, require: @any_or_all, searchmask: @mask, desktop: @desktop, limit: @limit)\n"}},{"id":"window_class(str:String)-instance-method","html_id":"window_class(str:String)-instance-method","name":"window_class","doc":"Search for windows whose class are *str*.","summary":"<p>Search for windows whose class are <em>str</em>.</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L46","def":{"name":"window_class","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::Class\n@window_class = str\n"}},{"id":"window_class_name(str:String)-instance-method","html_id":"window_class_name(str:String)-instance-method","name":"window_class_name","doc":"Search for windows whose class name are *str*.","summary":"<p>Search for windows whose class name are <em>str</em>.</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L52","def":{"name":"window_class_name","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::ClassName\n@window_class_name = str\n"}},{"id":"window_name(str:String)-instance-method","html_id":"window_name(str:String)-instance-method","name":"window_name","doc":"Search for windows whose names are *str*.","summary":"<p>Search for windows whose names are <em>str</em>.</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/search.cr#L58","def":{"name":"window_name","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mask = @mask | SearchMask::Name\n@window_name = str\n"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/SearchMask","path":"XDo/SearchMask.html","kind":"enum","full_name":"XDo::SearchMask","name":"SearchMask","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":39,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L39"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Title","name":"Title","value":"1","doc":null,"summary":null},{"id":"Class","name":"Class","value":"2","doc":"deprecated","summary":"<p>deprecated</p>"},{"id":"Name","name":"Name","value":"4","doc":null,"summary":null},{"id":"Pid","name":"Pid","value":"8","doc":null,"summary":null},{"id":"OnlyVisible","name":"OnlyVisible","value":"16","doc":null,"summary":null},{"id":"Screen","name":"Screen","value":"32","doc":null,"summary":null},{"id":"ClassName","name":"ClassName","value":"64","doc":null,"summary":null},{"id":"Desktop","name":"Desktop","value":"128","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"class?-instance-method","html_id":"class?-instance-method","name":"class?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L41","def":{"name":"class?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Class)"}},{"id":"class_name?-instance-method","html_id":"class_name?-instance-method","name":"class_name?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L46","def":{"name":"class_name?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(ClassName)"}},{"id":"desktop?-instance-method","html_id":"desktop?-instance-method","name":"desktop?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L47","def":{"name":"desktop?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Desktop)"}},{"id":"name?-instance-method","html_id":"name?-instance-method","name":"name?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L42","def":{"name":"name?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Name)"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L39","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value == 0"}},{"id":"only_visible?-instance-method","html_id":"only_visible?-instance-method","name":"only_visible?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L44","def":{"name":"only_visible?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(OnlyVisible)"}},{"id":"pid?-instance-method","html_id":"pid?-instance-method","name":"pid?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L43","def":{"name":"pid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Pid)"}},{"id":"screen?-instance-method","html_id":"screen?-instance-method","name":"screen?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L45","def":{"name":"screen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Screen)"}},{"id":"title?-instance-method","html_id":"title?-instance-method","name":"title?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L40","def":{"name":"title?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Title)"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/SearchType","path":"XDo/SearchType.html","kind":"enum","full_name":"XDo::SearchType","name":"SearchType","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":50,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L50"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Any","name":"Any","value":"0","doc":null,"summary":null},{"id":"All","name":"All","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"all?-instance-method","html_id":"all?-instance-method","name":"all?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L52","def":{"name":"all?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == All"}},{"id":"any?-instance-method","html_id":"any?-instance-method","name":"any?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L51","def":{"name":"any?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Any"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/Status","path":"XDo/Status.html","kind":"enum","full_name":"XDo::Status","name":"Status","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":65,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L65"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Success","name":"Success","value":"0","doc":null,"summary":null},{"id":"Error","name":"Error","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"error?-instance-method","html_id":"error?-instance-method","name":"error?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L67","def":{"name":"error?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Error"}},{"id":"success?-instance-method","html_id":"success?-instance-method","name":"success?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L66","def":{"name":"success?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Success"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/Window","path":"XDo/Window.html","kind":"class","full_name":"XDo::Window","name":"Window","abstract":false,"superclass":{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"x_do/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/window.cr","line_number":8,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L8"}],"repository_name":"x_do","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":"Represents an `XDo` view of an X11 window.\n\n```\nwin.move_mouse 0, 0\nputs \"typing inside #{win[\"WM_NAME\"]}\"\nwin.type \"hello!\"\n```","summary":"<p>Represents an <code><a href=\"../XDo.html\">XDo</a></code> view of an X11 window.</p>","class_methods":[],"constructors":[{"id":"new(xdo_p,window)-class-method","html_id":"new(xdo_p,window)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"xdo_p","doc":null,"default_value":"","external_name":"xdo_p","restriction":""},{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":""}],"args_string":"(xdo_p, window)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L12","def":{"name":"new","args":[{"name":"xdo_p","doc":null,"default_value":"","external_name":"xdo_p","restriction":""},{"name":"window","doc":null,"default_value":"","external_name":"window","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(xdo_p, window)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other)-instance-method","html_id":"==(other)-instance-method","name":"==","doc":"Returns true if `other` has the same X11 window ID (WID).","summary":"<p>Returns true if <code>other</code> has the same X11 window ID (WID).</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L16","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if other.is_a?(Window)\nelse\n  return false\nend\nother.window == window\n"}},{"id":"[](property:String)-instance-method","html_id":"[](property:String)-instance-method","name":"[]","doc":"Get the value associated with the *property* property.\n\nNOTE: Always returns a string, regardless of the underlying X11 atom. As a result,\nthis method can return \"garbage\" strings for some property names.","summary":"<p>Get the value associated with the <em>property</em> property.</p>","abstract":false,"args":[{"name":"property","doc":null,"default_value":"","external_name":"property","restriction":"String"}],"args_string":"(property : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L258","def":{"name":"[]","args":[{"name":"property","doc":null,"default_value":"","external_name":"property","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_window_property(xdo_p, window, property, out value, out _, out _, out _)\nString.new(value)\n"}},{"id":"[]=(property:String,value:String)-instance-method","html_id":"[]=(property:String,value:String)-instance-method","name":"[]=","doc":"Set the window's *property* property to *value*.\n\n```\n# change the window's title-bar name\nwin[\"WM_NAME\"] = \"my custom window name\"\n```","summary":"<p>Set the window's <em>property</em> property to <em>value</em>.</p>","abstract":false,"args":[{"name":"property","doc":null,"default_value":"","external_name":"property","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(property : String, value : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L250","def":{"name":"[]=","args":[{"name":"property","doc":null,"default_value":"","external_name":"property","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_window_property(xdo_p, window, property, value)"}},{"id":"activate!-instance-method","html_id":"activate!-instance-method","name":"activate!","doc":"Activates the window. Requires `_NET_ACTIVE_WINDOW` from EWMH.\n\nSee `#focus!` for WMs without `_NET_ACTIVE_WINDOW`.\n\n```\n# switch to the window's desktop and raise it\nwin.activate!\n```","summary":"<p>Activates the window.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L323","def":{"name":"activate!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.activate_window(xdo_p, window)"}},{"id":"child-instance-method","html_id":"child-instance-method","name":"child","doc":"Attempt to find the window's child.","summary":"<p>Attempt to find the window's child.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L378","def":{"name":"child","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"status = LibXDo.find_window_client(xdo_p, window, out client, ClientDirection::Children)\nif status.success?\nelse\n  raise(XDo::Error.new(\"unable to find child window\"))\nend\nWindow.new(xdo_p, client)\n"}},{"id":"class=(klass:String)-instance-method","html_id":"class=(klass:String)-instance-method","name":"class=","doc":"Set the window's class (`WM_CLASS` class name) to *klass*.\n\n```\nwin.class = \"my-custom-class\"\n```","summary":"<p>Set the window's class (<code>WM_CLASS</code> class name) to <em>klass</em>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"String"}],"args_string":"(klass : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L277","def":{"name":"class=","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_window_class(xdo_p, window, Pointer(UInt8).null, klass)"}},{"id":"class_name=(name:String)-instance-method","html_id":"class_name=(name:String)-instance-method","name":"class_name=","doc":"Set the window's class name (`WM_CLASS` instance name) to *name*.\n\n```\nwin.class_name = \"my-custom-instance\"\n```","summary":"<p>Set the window's class name (<code>WM_CLASS</code> instance name) to <em>name</em>.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L268","def":{"name":"class_name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_window_class(xdo_p, window, name, Pointer(UInt8).null)"}},{"id":"click(button:Button,repeat,delay=DEFAULT_DELAY)-instance-method","html_id":"click(button:Button,repeat,delay=DEFAULT_DELAY)-instance-method","name":"click","doc":"Click the given mouse *button* *repeat* times, with *delay* between each click.","summary":"<p>Click the given mouse <em>button</em> <em>repeat</em> times, with <em>delay</em> between each click.</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"},{"name":"repeat","doc":null,"default_value":"","external_name":"repeat","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(button : Button, repeat, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L43","def":{"name":"click","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"},{"name":"repeat","doc":null,"default_value":"","external_name":"repeat","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.click_window_multiple(xdo_p, window, button, repeat, delay)"}},{"id":"click(button:Button)-instance-method","html_id":"click(button:Button)-instance-method","name":"click","doc":"Click the given mouse *button* on this window (mouse-down + mouse-up)","summary":"<p>Click the given mouse <em>button</em> on this window (mouse-down + mouse-up)</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"args_string":"(button : Button)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L38","def":{"name":"click","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.click_window(xdo_p, window, button)"}},{"id":"close!-instance-method","html_id":"close!-instance-method","name":"close!","doc":"Closes a window without trying to kill its client.\n\nTo kill the client while closing a window, see `#kill!`.","summary":"<p>Closes a window without trying to kill its client.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L364","def":{"name":"close!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.close_window(xdo_p, window)"}},{"id":"desktop-instance-method","html_id":"desktop-instance-method","name":"desktop","doc":"Get the window's desktop number.\n\n```\ndesktop = win.desktop\n```","summary":"<p>Get the window's desktop number.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L214","def":{"name":"desktop","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_desktop_for_window(xdo_p, window, out desktop)\ndesktop\n"}},{"id":"focus!-instance-method","html_id":"focus!-instance-method","name":"focus!","doc":"Focuses the window.\n\nSee `#activate!` for WMs with `_NET_ACTIVE_WINDOW`.","summary":"<p>Focuses the window.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L345","def":{"name":"focus!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.focus_window(xdo_p, window)"}},{"id":"keys(keys:String,delay=DEFAULT_DELAY)-instance-method","html_id":"keys(keys:String,delay=DEFAULT_DELAY)-instance-method","name":"keys","doc":"Send some *keys* (down + up) to the window, with *delay* between them.\n\n```\nwin.keys \"Ctrl+s\"\n```","summary":"<p>Send some <em>keys</em> (down + up) to the window, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L134","def":{"name":"keys","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window(xdo_p, window, keys, delay)"}},{"id":"keys_down(keys:String,delay=DEFAULT_DELAY)-instance-method","html_id":"keys_down(keys:String,delay=DEFAULT_DELAY)-instance-method","name":"keys_down","doc":"Send some key press (down) events for the given *keys*, with *delay* between them.\nSee `#keys_up`.\n\n```\nwin.keys_down \"Ctrl+o\"\n```","summary":"<p>Send some key press (down) events for the given <em>keys</em>, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L144","def":{"name":"keys_down","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window_down(xdo_p, window, keys, delay)"}},{"id":"keys_raw(keys:Array(LibXDo::Charcodemap),*,pressed:Bool,modifier=0,delay=DEFAULT_DELAY)-instance-method","html_id":"keys_raw(keys:Array(LibXDo::Charcodemap),*,pressed:Bool,modifier=0,delay=DEFAULT_DELAY)-instance-method","name":"keys_raw","doc":"Send some key events by specifying keysyms and modifiers directly,\nwith *delay* between them.\nYou most likely want to use `#keys` or `#type` instead, however this function\nskips the string parsing and should consequently run slightly faster.\n\n```\nkey1 = XDo::LibXDo::Charcodemap.new\nkey1.code = 38\nkey1.modmask = 1\nkey2 = XDo::LibXDo::Charcodemap.new\nkey2.code = 56\nkeys = [key1, key2]\n# Sends `AB`\nwin.keys_raw keys, pressed: true\nwin.keys_raw keys, pressed: false\n```","summary":"<p>Send some key events by specifying keysyms and modifiers directly, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(LibXDo::Charcodemap)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pressed","doc":null,"default_value":"","external_name":"pressed","restriction":"Bool"},{"name":"modifier","doc":null,"default_value":"0","external_name":"modifier","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : Array(LibXDo::Charcodemap), *, pressed : Bool, modifier = <span class=\"n\">0</span>, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L174","def":{"name":"keys_raw","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"Array(LibXDo::Charcodemap)"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"pressed","doc":null,"default_value":"","external_name":"pressed","restriction":"Bool"},{"name":"modifier","doc":null,"default_value":"0","external_name":"modifier","restriction":""},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window_list_do(xdo_p, window, keys, keys.size, pressed, pointerof(modifier), delay)"}},{"id":"keys_up(keys:String,delay=DEFAULT_DELAY)-instance-method","html_id":"keys_up(keys:String,delay=DEFAULT_DELAY)-instance-method","name":"keys_up","doc":"Send some key release (up) events for the given *keys*, with *delay* between them.\nSee `#keys_down`.\n\n```\nwin.keys_up \"Ctrl+o\"\n```","summary":"<p>Send some key release (up) events for the given <em>keys</em>, with <em>delay</em> between them.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(keys : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L154","def":{"name":"keys_up","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.send_keysequence_window_up(xdo_p, window, keys, delay)"}},{"id":"kill!-instance-method","html_id":"kill!-instance-method","name":"kill!","doc":"Kills a window and the client owning it.\n\nTo close a window without killing its client, see `#close!`.","summary":"<p>Kills a window and the client owning it.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L357","def":{"name":"kill!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.kill_window(xdo_p, window)"}},{"id":"location-instance-method","html_id":"location-instance-method","name":"location","doc":"Get the window's location, consisting of a tuple of `width`, `height`,\nand `Screen` object\n\n```\nx, y, screen = win.location\n```","summary":"<p>Get the window's location, consisting of a tuple of <code>width</code>, <code>height</code>, and <code><a href=\"../XDo/Screen.html\">Screen</a></code> object</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L204","def":{"name":"location","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_window_location(xdo_p, window, out x, out y, out screen)\n{x, y, Screen.new(xdo_p, screen)}\n"}},{"id":"map!-instance-method","html_id":"map!-instance-method","name":"map!","doc":"Maps the window, making it visible if previously unmapped. See `#unmap!`.","summary":"<p>Maps the window, making it visible if previously unmapped.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L328","def":{"name":"map!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.map_window(xdo_p, window)"}},{"id":"minimize!-instance-method","html_id":"minimize!-instance-method","name":"minimize!","doc":"Minimizes the window.","summary":"<p>Minimizes the window.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L338","def":{"name":"minimize!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.minimize_window(xdo_p, window)"}},{"id":"mouse_down(button:Button)-instance-method","html_id":"mouse_down(button:Button)-instance-method","name":"mouse_down","doc":"Send a mouse-down event for the given mouse *button* to this window.","summary":"<p>Send a mouse-down event for the given mouse <em>button</em> to this window.</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"args_string":"(button : Button)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L28","def":{"name":"mouse_down","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.mouse_down(xdo_p, window, button)"}},{"id":"mouse_up(button:Button)-instance-method","html_id":"mouse_up(button:Button)-instance-method","name":"mouse_up","doc":"Send a mouse-up event for the given mouse *button* to this window.","summary":"<p>Send a mouse-up event for the given mouse <em>button</em> to this window.</p>","abstract":false,"args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"args_string":"(button : Button)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L33","def":{"name":"mouse_up","args":[{"name":"button","doc":null,"default_value":"","external_name":"button","restriction":"Button"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.mouse_up(xdo_p, window, button)"}},{"id":"move(x,y)-instance-method","html_id":"move(x,y)-instance-method","name":"move","doc":"Attempt to move the window to *x*, *y* on the screen.\n\n```\n# try to put the window in the upper left corner\nwin.move 0, 0\n```","summary":"<p>Attempt to move the window to <em>x</em>, <em>y</em> on the screen.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L184","def":{"name":"move","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.move_window(xdo_p, window, x, y)"}},{"id":"move(desktop)-instance-method","html_id":"move(desktop)-instance-method","name":"move","doc":"Attempt to move the window to *desktop*.\n\n```\n# try to move the window to desktop #3\nwin.move 3\n```","summary":"<p>Attempt to move the window to <em>desktop</em>.</p>","abstract":false,"args":[{"name":"desktop","doc":null,"default_value":"","external_name":"desktop","restriction":""}],"args_string":"(desktop)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L194","def":{"name":"move","args":[{"name":"desktop","doc":null,"default_value":"","external_name":"desktop","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_desktop_for_window(xdo_p, window, desktop)"}},{"id":"move_mouse(x,y)-instance-method","html_id":"move_mouse(x,y)-instance-method","name":"move_mouse","doc":"Move the mouse relative to this window.","summary":"<p>Move the mouse relative to this window.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"args_string":"(x, y)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L23","def":{"name":"move_mouse","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.move_mouse_relative_to_window(xdo_p, window, x, y)"}},{"id":"name-instance-method","html_id":"name-instance-method","name":"name","doc":"Get the window's name (`WM_NAME`), if any.","summary":"<p>Get the window's name (<code>WM_NAME</code>), if any.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L387","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_window_name(xdo_p, window, out name, out _, out _)\nif name.null?\nelse\n  String.new(name)\nend\n"}},{"id":"on_active(*,want_active=true,&)-instance-method","html_id":"on_active(*,want_active=true,&)-instance-method","name":"on_active","doc":"Wait for the window to become active or inactive, per *want_active*.","summary":"<p>Wait for the window to become active or inactive, per <em>want_active</em>.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_active","doc":null,"default_value":"true","external_name":"want_active","restriction":""}],"args_string":"(*, want_active = <span class=\"n\">true</span>, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L115","def":{"name":"on_active","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_active","doc":null,"default_value":"true","external_name":"want_active","restriction":""}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_active(want_active: want_active)\nyield self\n"}},{"id":"on_focus(*,want_focus=true,&)-instance-method","html_id":"on_focus(*,want_focus=true,&)-instance-method","name":"on_focus","doc":"Wait for the window to gain or lose focus, per *want_focus*.","summary":"<p>Wait for the window to gain or lose focus, per <em>want_focus</em>.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_focus","doc":null,"default_value":"true","external_name":"want_focus","restriction":""}],"args_string":"(*, want_focus = <span class=\"n\">true</span>, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L104","def":{"name":"on_focus","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_focus","doc":null,"default_value":"true","external_name":"want_focus","restriction":""}],"double_splat":null,"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_focus(want_focus: want_focus)\nyield self\n"}},{"id":"on_map_state(state:WindowMapState,&)-instance-method","html_id":"on_map_state(state:WindowMapState,&)-instance-method","name":"on_map_state","doc":"Wait for the window's map state to become *state*.","summary":"<p>Wait for the window's map state to become <em>state</em>.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"WindowMapState"}],"args_string":"(state : WindowMapState, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L53","def":{"name":"on_map_state","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"WindowMapState"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_map_state(state)\nyield self\n"}},{"id":"on_size_change(&)-instance-method","html_id":"on_size_change(&)-instance-method","name":"on_size_change","doc":"Wait for the window's dimensions to change, and yield `self`.\n\n```\nwindow.on_size_change do\n  puts \"my new size is: #{window.size}\"\nend\n```","summary":"<p>Wait for the window's dimensions to change, and yield <code>self</code>.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L93","def":{"name":"on_size_change","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_size_from(*size)\nyield self\n"}},{"id":"on_size_from(width,height,use_hints=false,&)-instance-method","html_id":"on_size_from(width,height,use_hints=false,&)-instance-method","name":"on_size_from","doc":"Wait for the window's dimensions to change **from** *width* x *height* to something else.\n\nIf *use_hints* is set to true, the supplied dimensions are measured\naccording to the window's size hints (not necessarily pixels).","summary":"<p>Wait for the window's dimensions to change <strong>from</strong> <em>width</em> x <em>height</em> to something else.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"args_string":"(width, height, use_hints = <span class=\"n\">false</span>, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L67","def":{"name":"on_size_from","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_size_from(width, height)\nyield self\n"}},{"id":"on_size_to(width,height,use_hints=false,&)-instance-method","html_id":"on_size_to(width,height,use_hints=false,&)-instance-method","name":"on_size_to","doc":"Wait for the window's dimensions to change **to** *width* x *height* from something else.\n\nIf *use_hints* is set to true, the supplied dimensions are measured\naccording to the window's size hints (not necessarily pixels).","summary":"<p>Wait for the window's dimensions to change <strong>to</strong> <em>width</em> x <em>height</em> from something else.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"args_string":"(width, height, use_hints = <span class=\"n\">false</span>, &)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L81","def":{"name":"on_size_to","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"wait_for_size_to(width, height)\nyield self\n"}},{"id":"override_redirect=(override_redirect:Bool)-instance-method","html_id":"override_redirect=(override_redirect:Bool)-instance-method","name":"override_redirect=","doc":"Set the window's override-redirect flag.\n\n```\nwin.override_redirect = true\n```","summary":"<p>Set the window's override-redirect flag.</p>","abstract":false,"args":[{"name":"override_redirect","doc":null,"default_value":"","external_name":"override_redirect","restriction":"Bool"}],"args_string":"(override_redirect : Bool)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L311","def":{"name":"override_redirect=","args":[{"name":"override_redirect","doc":null,"default_value":"","external_name":"override_redirect","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_window_override_redirect(xdo_p, window, override_redirect ? 1 : 0)"}},{"id":"parent-instance-method","html_id":"parent-instance-method","name":"parent","doc":"Attempt to find the window's parent.","summary":"<p>Attempt to find the window's parent.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L369","def":{"name":"parent","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"status = LibXDo.find_window_client(xdo_p, window, out client, ClientDirection::Parents)\nif status.success?\nelse\n  raise(XDo::Error.new(\"unable to find parent window\"))\nend\nWindow.new(xdo_p, client)\n"}},{"id":"pid-instance-method","html_id":"pid-instance-method","name":"pid","doc":"Return the process ID associated with the window, or `0` if not found.","summary":"<p>Return the process ID associated with the window, or <code>0</code> if not found.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L292","def":{"name":"pid","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_pid_window(xdo_p, window)"}},{"id":"raise!-instance-method","html_id":"raise!-instance-method","name":"raise!","doc":"Raises the window (bringing it to the foreground).","summary":"<p>Raises the window (bringing it to the foreground).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L350","def":{"name":"raise!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.raise_window(xdo_p, window)"}},{"id":"resize(width,height,flags:ResizeFlag=ResizeFlag::Pixels)-instance-method","html_id":"resize(width,height,flags:ResizeFlag=ResizeFlag::Pixels)-instance-method","name":"resize","doc":"Attempt to change the window's size to *width* x *height*, scaled by *flags*.\n\n```\n# make the window 100px by 100px\nwin.resize 100, 100\n\n# make the window 500 by 500 size-hint units\nwin.resize 500, 500, ResizeFlag::UseHints\n```","summary":"<p>Attempt to change the window's size to <em>width</em> x <em>height</em>, scaled by <em>flags</em>.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"flags","doc":null,"default_value":"ResizeFlag::Pixels","external_name":"flags","restriction":"ResizeFlag"}],"args_string":"(width, height, flags : ResizeFlag = <span class=\"t\">ResizeFlag</span><span class=\"t\">::</span><span class=\"t\">Pixels</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L240","def":{"name":"resize","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"flags","doc":null,"default_value":"ResizeFlag::Pixels","external_name":"flags","restriction":"ResizeFlag"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_window_size(xdo_p, window, width, height, flags)"}},{"id":"size-instance-method","html_id":"size-instance-method","name":"size","doc":"Return the size of the window as a tuple of `width` and `height`.\n\n```\nwidth, height = win.size\n```","summary":"<p>Return the size of the window as a tuple of <code>width</code> and <code>height</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L301","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.get_window_size(xdo_p, window, out width, out height)\n{width, height}\n"}},{"id":"translate_with_hint(width,height)-instance-method","html_id":"translate_with_hint(width,height)-instance-method","name":"translate_with_hint","doc":"Attempt to apply the window's sizing hints with the given *width* and *height*.\n\nUses `XGetWMNormalHints()` internally to determine the resize increment and base size.\n\n```\nwin.translate_with_hint 100, 100\n```","summary":"<p>Attempt to apply the window's sizing hints with the given <em>width</em> and <em>height</em>.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""}],"args_string":"(width, height)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L226","def":{"name":"translate_with_hint","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.translate_window_with_sizehint(xdo_p, window, width, height, out width1, out height1)\n{width1, height1}\n"}},{"id":"type(text:String,delay=DEFAULT_DELAY)-instance-method","html_id":"type(text:String,delay=DEFAULT_DELAY)-instance-method","name":"type","doc":"Send some *text* to the window, with *delay* between the keystrokes.\n\n```\nwin.type \"hello from Crystal!\"\n```","summary":"<p>Send some <em>text</em> to the window, with <em>delay</em> between the keystrokes.</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"args_string":"(text : String, delay = <span class=\"t\">DEFAULT_DELAY</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L125","def":{"name":"type","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"delay","doc":null,"default_value":"DEFAULT_DELAY","external_name":"delay","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.enter_text_window(xdo_p, window, text, delay)"}},{"id":"unmap!-instance-method","html_id":"unmap!-instance-method","name":"unmap!","doc":"Unmaps the window, making it invisible. See `#map!`.","summary":"<p>Unmaps the window, making it invisible.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L333","def":{"name":"unmap!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.unmap_window(xdo_p, window)"}},{"id":"urgent=(urgent:Bool)-instance-method","html_id":"urgent=(urgent:Bool)-instance-method","name":"urgent=","doc":"Set the window's urgency hint.\n\n```\n# tell the WM to indicate the window's urgency to the user\nwin.urgent = true\n```","summary":"<p>Set the window's urgency hint.</p>","abstract":false,"args":[{"name":"urgent","doc":null,"default_value":"","external_name":"urgent","restriction":"Bool"}],"args_string":"(urgent : Bool)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L287","def":{"name":"urgent=","args":[{"name":"urgent","doc":null,"default_value":"","external_name":"urgent","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.set_window_urgency(xdo_p, window, urgent ? 1 : 0)"}},{"id":"wait_for_active(*,want_active=true)-instance-method","html_id":"wait_for_active(*,want_active=true)-instance-method","name":"wait_for_active","doc":"Wait for the window to become active or inactive, per *want_active*.","summary":"<p>Wait for the window to become active or inactive, per <em>want_active</em>.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_active","doc":null,"default_value":"true","external_name":"want_active","restriction":""}],"args_string":"(*, want_active = <span class=\"n\">true</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L110","def":{"name":"wait_for_active","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_active","doc":null,"default_value":"true","external_name":"want_active","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_window_active(xdo_p, window, want_active ? 1 : 0)"}},{"id":"wait_for_focus(*,want_focus=true)-instance-method","html_id":"wait_for_focus(*,want_focus=true)-instance-method","name":"wait_for_focus","doc":"Wait for the window to gain or lose focus, per *want_focus*.","summary":"<p>Wait for the window to gain or lose focus, per <em>want_focus</em>.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_focus","doc":null,"default_value":"true","external_name":"want_focus","restriction":""}],"args_string":"(*, want_focus = <span class=\"n\">true</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L99","def":{"name":"wait_for_focus","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"want_focus","doc":null,"default_value":"true","external_name":"want_focus","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_window_focus(xdo_p, window, want_focus ? 1 : 0)"}},{"id":"wait_for_map_state(state:WindowMapState)-instance-method","html_id":"wait_for_map_state(state:WindowMapState)-instance-method","name":"wait_for_map_state","doc":"Wait for the window's map state to become *state*.","summary":"<p>Wait for the window's map state to become <em>state</em>.</p>","abstract":false,"args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"WindowMapState"}],"args_string":"(state : WindowMapState)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L48","def":{"name":"wait_for_map_state","args":[{"name":"state","doc":null,"default_value":"","external_name":"state","restriction":"WindowMapState"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_window_map_state(xdo_p, win, state)"}},{"id":"wait_for_size_from(width,height,use_hints=false)-instance-method","html_id":"wait_for_size_from(width,height,use_hints=false)-instance-method","name":"wait_for_size_from","doc":"Wait for the window's dimensions to change **from** *width* x *height* to something else.\n\nIf *use_hints* is set to true, the supplied dimensions are measured\naccording to the window's size hints (not necessarily pixels).","summary":"<p>Wait for the window's dimensions to change <strong>from</strong> <em>width</em> x <em>height</em> to something else.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"args_string":"(width, height, use_hints = <span class=\"n\">false</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L62","def":{"name":"wait_for_size_from","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_window_size(xdo_p, window, width, height, use_hints ? 1 : 0, 1)"}},{"id":"wait_for_size_to(width,height,use_hints=false)-instance-method","html_id":"wait_for_size_to(width,height,use_hints=false)-instance-method","name":"wait_for_size_to","doc":"Wait for the window's dimensions to change **to** *width* x *height* from something else.\n\nIf *use_hints* is set to true, the supplied dimensions are measured\naccording to the window's size hints (not necessarily pixels).","summary":"<p>Wait for the window's dimensions to change <strong>to</strong> <em>width</em> x <em>height</em> from something else.</p>","abstract":false,"args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"args_string":"(width, height, use_hints = <span class=\"n\">false</span>)","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L76","def":{"name":"wait_for_size_to","args":[{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":""},{"name":"height","doc":null,"default_value":"","external_name":"height","restriction":""},{"name":"use_hints","doc":null,"default_value":"false","external_name":"use_hints","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"LibXDo.wait_for_window_size(xdo_p, window, width, height, use_hints ? 1 : 0, 0)"}},{"id":"window:LibXDo::Window-instance-method","html_id":"window:LibXDo::Window-instance-method","name":"window","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : LibXDo::Window","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/window.cr#L10","def":{"name":"window","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"LibXDo::Window","visibility":"Public","body":"@window"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/WindowMapState","path":"XDo/WindowMapState.html","kind":"enum","full_name":"XDo::WindowMapState","name":"WindowMapState","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":55,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L55"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"IsUnmapped","name":"IsUnmapped","value":"0","doc":null,"summary":null},{"id":"IsUnviewable","name":"IsUnviewable","value":"1","doc":null,"summary":null},{"id":"IsViewable","name":"IsViewable","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"is_unmapped?-instance-method","html_id":"is_unmapped?-instance-method","name":"is_unmapped?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L56","def":{"name":"is_unmapped?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IsUnmapped"}},{"id":"is_unviewable?-instance-method","html_id":"is_unviewable?-instance-method","name":"is_unviewable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L57","def":{"name":"is_unviewable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IsUnviewable"}},{"id":"is_viewable?-instance-method","html_id":"is_viewable?-instance-method","name":"is_viewable?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L58","def":{"name":"is_viewable?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == IsViewable"}}],"macros":[],"types":[]},{"html_id":"x_do/XDo/XDoFeatures","path":"XDo/XDoFeatures.html","kind":"enum","full_name":"XDo::XDoFeatures","name":"XDoFeatures","abstract":false,"superclass":null,"ancestors":[{"html_id":"x_do/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"x_do/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"x_do/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"x_do/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/x_do/enums.cr","line_number":61,"url":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L61"}],"repository_name":"x_do","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"XTest","name":"XTest","value":"0","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"x_do/XDo","kind":"class","full_name":"XDo","name":"XDo"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"x_test?-instance-method","html_id":"x_test?-instance-method","name":"x_test?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/woodruffw/x_do.cr/blob/a8eea4c180ee53103d7e7def067852a6fd24e27a/src/x_do/enums.cr#L62","def":{"name":"x_test?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == XTest"}}],"macros":[],"types":[]}]}]}}